Задача 1
class BaseObject:
 
    def __init__(self, x: int, y: int, z: int):
        self.x, self.y, self.z = x, y, z
        
    def get_coordinates(self) -> (int, int, int):
        return self.x, self.y, self.z
 
 
class Block(BaseObject):
    
    def shatter(self):
        self.x, self.y, self.z = None, None, None
 
 
class Entity(BaseObject):
 
    def move(self, x: int, y: int, z: int):
        self.x, self.y, self.z = x, y, z
 
 
class Thing(BaseObject):



Задача 2 
class Acellularia:
    pass

class Cellularia:
    pass

class Prokaryota(Cellularia):
    pass

class Eukaryota(Cellularia):
    pass

class Unicellularia(Eukaryota):
    pass

class Fungi(Eukaryota):
    pass

class Plantae(Eukaryota):
    pass

class Animalia(Eukaryota):
    pass



Задача 3
class User:
    def solve(self, n):
        pass

class Student(User):
    pass

class Teacher(User):
    def check_solution(self, user, n):
        pass

class Admin(User):
    def edit(self, n):
        pass

class SuperAdmin(Admin):
    def grant(self, user):
        pass



Задача 4 
class User:
    def __init__(self, name):
        self.name = name

    def send_message(self, user, message):
        pass

    def post(self, message):
        pass

    def info(self):
        return ""

    def describe(self):
        print(f"{self.name} {self.info()}")

class Person(User):
    def __init__(self, name, birthday):
        super().__init__(name)
        self.birthday = birthday

    def info(self):
        return f"Дата рождения: {self.birthday}"

    def subscribe(self, user):
        pass

class Community(User):
    def __init__(self, name, description):
        super().__init__(name)
        self.description = description

    def info(self):
        return f"Описание: {self.description}"




Задача 5
class Animal:
    def breathe(self):
        pass

    def eat(self):
        pass

class Fish(Animal):
    def swim(self):
        pass

class Bird(Animal):
    def lay_eggs(self):
        pass

class FlyingBird(Bird):
    def fly(self):
        pass




Задача6
class Vehicle:
    pass

class WaterVehicle(Vehicle):
    pass

class AirVehicle(Vehicle):
    pass

class LandVehicle(Vehicle):
    pass

class SpaceVehicle(Vehicle):
    pass

class Ship(WaterVehicle):
    pass

class Boat(WaterVehicle):
    pass

class Airplane(AirVehicle):
    pass

class Dirigible(AirVehicle):
    pass

class Balloon(AirVehicle):
    pass

class Train(LandVehicle):
    pass

class Car(LandVehicle):
    pass

class Bicycle(LandVehicle):
    pass

class AnimalPoweredVehicle(LandVehicle):
    pass

class HorseCart(AnimalPoweredVehicle):
    pass

class Spacecraft(SpaceVehicle):
    pass

class Rocket(SpaceVehicle):
    pass

class Satellite(SpaceVehicle):
    pass

Задача7
class Shape:
    pass
 
 
class Polygon(Shape):
    pass
 
 
class Triangle(Polygon):
    pass
 
 
class IsoscelesTriangle(Triangle):
    pass
 
 
class EquilateralTriangle(Triangle):
    pass
 
 
class Quadrilateral(Polygon):
    pass
 
 
class Parallelogram(Quadrilateral):
    pass
 
 
class Rectangle(Quadrilateral):
    pass
 
 
class Square(Rectangle):
    pass




Задача 8
class Summator:
    def transform(self, n):
        return n
    def sum(self, N):
        count = 0
        for i in range(N + 1):
            count += self.transform(int(i))
        return count
class SquareSummator(Summator):
    def __init__(self):
        pass
    def transform(self, n):
        return n ** 2
class CubeSummator(Summator):
    def __init__(self):
        pass
    def transform(self, n):
        return n ** 3




Задача 9
class Profile:
    def __init__(self, profession):
        self.profession = profession

    def info(self):
        return ""

    def describe(self):
        print(f"{self.profession} {self.info()}")

class Vacancy(Profile):
    def __init__(self, profession, salary):
        super().__init__(profession)
        self.salary = salary

    def info(self):
        return f"Предлагаемая зарплата: {self.salary}"

class Resume(Profile):
    def __init__(self, profession, experience):
        super().__init__(profession)
        self.experience = experience

    def info(self):
        return f"Стаж работы: {self.experience}"




Задача 10
class Triangle:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def perimeter(self):
        return self.a + self.b + self.c

class EquilateralTriangle(Triangle):
    def __init__(self, a):
        super().__init__(a, a, a)




Задача 12
class A:
    def __str__(self):
        return "A.str"

    def hello(self):
        print("Hello")

class B:
    def __str__(self):
        return "B.str"

    def good_evening(self):
        print("Good evening")

class C(A, B):
    pass

class D(A, B):
    pass

c = C()
print(c)  
c.hello() 

d = D()
print(d)  
d.good_evening()  
