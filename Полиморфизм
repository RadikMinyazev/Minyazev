Задача 1 
class Selector:
    def __init__(self, values):
        self.values = values
        self.odds = []
        self.even = []

    def get_odds(self):
        print(self.values)
        for _ in self.values:
            if _ % 2 == 1:
                self.odds.append(_)
        return (self.odds)

    def get_evens(self):
        for _ in self.values:
            if _ % 2 == 0:
                self.even.append(_)
        return (self.even)


# Ваш код

values = [11, 12, 13, 14, 15, 16, 22, 44, 66]
selector = Selector(values)
odds = selector.get_odds()
evens = selector.get_evens()
print(' '.join(map(str, odds)))




Задача 2 
class LeftParagraph:
 def __init__(self, width):
 self.width = width
 self.text = ""

 def add_word(self, word):
 self.text += word + " "

 def end(self):
 print(self.text.ljust(self.width))
        self.text = ""

class RightParagraph:
 def __init__(self, width):
        self.width = width
        self.text = ""

    def add_word(self, word):
        self.text += word + " "

    def end(self):
 print(self.text.rjust(self.width))
 self.text = ""

lp = LeftParagraph(8)
lp.add_word('abc')
lp.add_word('defg')
lp.add_word('hi')
lp.add_word('jklmnopq')
lp.add_word('r')
lp.add_word('stuv')
lp.end()
print()

rp = RightParagraph(8)
rp.add_word('abc')
rp.add_word('defg')
rp.add_word('hi')
rp.add_word('jklmnopq')
rp.add_word('r')
rp.add_word('stuv')
rp.end()



Задача 3
import self


class AmericanDate:
    def __init__(self, year, month, day):
        self.year = year
        self.month = month
        self.day = day

    def set_month(self, month):
        self.month = month

    def set_day(self, day):
        self.day = day

    def set_year(self, year):
        self.year = year

    def get_month(self):
        return self.month

    def get_day(self):
        return self.day

    def get_year(self):
        return self.year

    def format(self):
        return "{1}.{0}.{2}".format(self.day, self.month, self.year)

class EuropeanDate:

    def __init__(self, year, month, day):
        self.year = year
        self.month = month
        self.day = day

    def set_month(self, month):
        self.month = month

    def set_day(self, day):
        self.day = day

    def set_year(self, year):
        self.year = year

    def get_month(self):
        return self.month

    def get_day(self):
        return day

    def get_year(self):
        return self.year

    def format(self):
        return "{0}.{1}.{2}".format(self.day, self.month, self.year)


american = AmericanDate(2000, 4, 10)
european = EuropeanDate(2000, 4, 10)
print(american.format())
print(european.format())



Задача 4
class MinStat:
    def __init__(self):
        self.numbers = []

    def add_number(self, number):
        self.numbers.append(number)

    def result(self):
        return (min(self.numbers))


class MaxStat:
    def __init__(self):
        self.numbers = []

    def add_number(self, number):
        self.numbers.append(number)

    def result(self):
        return (max(self.numbers))


class AverageStat:
    def __init__(self):
        self.numbers = []

    def add_number(self, number):
        self.numbers.append(number)

    def result(self):
        avg = float
        summ = sum(self.numbers)
        avg = summ / len(self.numbers)
        return (avg)



values = [1, 2, 4, 4]

mins = MinStat()
maxs = MaxStat()
average = AverageStat()
for v in values:
    mins.add_number(v)
    maxs.add_number(v)
    average.add_number(v)

print(mins.result(), maxs.result(), '{:<05.3}'.format(average.result()))




Задача 5
class Table:
    def __init__(self, rows, cols):
        self.table = [[0] * cols for _ in range(rows)]
        self.rows = rows
        self.cols = cols

    def get_value(self, row, col):
        if 0 <= row < self.rows and 0 <= col < self.cols:
            return self.table[row][col]
        else:
            return None

    def set_value(self, row, col, value):
        self.table[row][col] = value

    def n_rows(self):
        return self.rows

    def n_cols(self):
        return self.cols
tab = Table(3, 5)
tab.set_value(0, 1, 10)
tab.set_value(1, 2, 20)
tab.set_value(2, 3, 30)
for i in range(tab.n_rows()):
    for j in range(tab.n_cols()):
        print(tab.get_value(i, j), end=' ')
    print()


